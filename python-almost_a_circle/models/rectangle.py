# models/rectangle.py
from base import Base
""" imports class Base into the module """
class Rectangle(Base):
    """ 
    defines class Rectangle as a subclass of class Base
    
    Attributes:
    __width -> width
    __height -> height
    __x -> x
    __y -> y
    """
    def __init__(self, width, height, x=0, y=0, id=None):
        """
        Constructor for the Rectangle class.

        Parameters:
        - width (int): The width of the rectangle.
        - height (int): The height of the rectangle.
        - x (int, optional): The x-coordinate of the rectangle's position. Defaults to 0.
        - y (int, optional): The y-coordinate of the rectangle's position. Defaults to 0.
        - id (int, optional): The identifier of the rectangle. If None, it will be generated by the Base class.

        Attributes:
        - __width (int): Private attribute for width.
        - __height (int): Private attribute for height.
        - __x (int): Private attribute for x-coordinate.
        - __y (int): Private attribute for y-coordinate.
        """
        super().__init__(id)  
        """Call the super class with id
        """ 
        self.width = width
        self.height = height
        self.x = x
        self.y = y

    @property
    def width(self):
        """
        Getter for the width attribute.
        """
        return self.__width

    @width.setter
    def width(self, value):
        """
        Setter for the width attribute with validation.

        Parameters:
        - value (int): The value to set for width.

        Raises:
        - ValueError: If the value is not a positive integer.
        """
        self.__validate_positive_int('width', value)
        self.__width = value

    @property
    def height(self):
        """
        Getter for the height attribute.
        """
        return self.__height

    @height.setter
    def height(self, value):
        """
        Setter for the height attribute with validation.

        Parameters:
        - value (int): The value to set for height.

        Raises:
        - ValueError: If the value is not a positive integer.
        """
        self.__validate_positive_int('height', value)
        self.__height = value

    @property
    def x(self):
        """
        Getter for the x-coordinate attribute.
        """
        return self.__x

    @x.setter
    def x(self, value):
        """
        Setter for the x-coordinate attribute with validation.

        Parameters:
        - value (int): The value to set for x-coordinate.

        Raises:
        - ValueError: If the value is not an integer.
        """
        self.__validate_int('x', value)
        self.__x = value

    @property
    def y(self):
        """
        Getter for the y-coordinate attribute.
        """
        return self.__y

    @y.setter
    def y(self, value):
        """
        Setter for the y-coordinate attribute with validation.

        Parameters:
        - value (int): The value to set for y-coordinate.

        Raises:
        - ValueError: If the value is not an integer.
        """
        self.__validate_int('y', value)
        self.__y = value

    def __validate_positive_int(self, attribute_name, value):
        """
        Validate that the given value is a positive integer.

        Parameters:
        - attribute_name (str): The name of the attribute being validated.
        - value: The value to validate.

        Raises:
        - ValueError: If the value is not a positive integer.
        """
        if not isinstance(value, int) or value <= 0:
            raise ValueError(f"{attribute_name} must be a positive integer")

    def __validate_int(self, attribute_name, value):
        """
        Validate that the given value is an integer.

        Parameters:
        - attribute_name (str): The name of the attribute being validated.
        - value: The value to validate.

        Raises:
        - ValueError: If the value is not an integer.
        """
        if not isinstance(value, int):
            raise ValueError(f"{attribute_name} must be an integer")
        